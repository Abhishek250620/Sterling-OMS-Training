package com.trainings.api;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.sterlingcommerce.baseutil.SCXmlUtil;
import com.yantra.interop.japi.YIFApi;
import com.yantra.interop.japi.YIFClientFactory;
import com.yantra.interop.japi.YIFCustomApi;
import com.yantra.yfc.util.YFCCommon;
import com.yantra.yfs.japi.YFSConnectionHolder;
import com.yantra.yfs.japi.YFSEnvironment;

public class ResolveACRemorseHold implements YIFCustomApi {

	@Override
	public void setProperties(Properties arg0) throws Exception {
	}
	
	protected static YIFApi api = null;
	
	public List<Document> getJobs(YFSEnvironment env) throws Exception {
		List<Document> listDocuments = new ArrayList<Document>();
		String sql = "select order_header_key from yfs_order_hold_type where status='1100' and hold_type='AC_REMORSE_HOLD'";
		ResultSet rsRecords = fetchRecords(env, sql);
		if (!YFCCommon.isVoid(rsRecords)) {
			while (rsRecords.next()) {
				String strOHKey = rsRecords.getString(1).trim();
				Document inDocToExecuteJob = CreateDocument(strOHKey);
				listDocuments.add(inDocToExecuteJob);
			}
		}
		return listDocuments;
	}
	
	private ResultSet fetchRecords(YFSEnvironment env, String strSqlQuery) throws Exception {
		ResultSet resultSet = null;
		Statement statement = null;
		Connection connection = null;
		YFSConnectionHolder context = (YFSConnectionHolder) env;
		connection = context.getDBConnection();
		statement = connection.createStatement();
		resultSet = statement.executeQuery(strSqlQuery);
		return resultSet;
	}
	
	public static  Document CreateDocument(String strOHKey) {
		Document docChangeOrdInput = SCXmlUtil.createDocument("Order");
		Element eleChangeOrdRoot = docChangeOrdInput.getDocumentElement();
		Element eleOrdLineHoldTypes = SCXmlUtil.createChild(eleChangeOrdRoot, "OrderHoldTypes");
		Element eleOrdLineHoldType = SCXmlUtil.createChild(eleOrdLineHoldTypes, "OrderHoldType");
		eleChangeOrdRoot.setAttribute("OrderHeaderKey", strOHKey);
		eleChangeOrdRoot.setAttribute("Override", "Y");
		eleOrdLineHoldType.setAttribute("HoldType", "AC_REMORSE_HOLD");
		eleOrdLineHoldType.setAttribute("Status", "1300");
		Element extn = SCXmlUtil.createChild(eleChangeOrdRoot, "Extn");
		extn.setAttribute("HoldStatus", "Resolved");
		return docChangeOrdInput;
	}
	
	public Document executeTask(YFSEnvironment env, Document inDoc) throws Exception {
		Document doc = getApi().changeOrder(env, inDoc);
		return doc;
	}
	
	public YIFApi getApi() throws Exception {
		if (api == null) {
			api = YIFClientFactory.getInstance().getLocalApi();
		}
		return api;
	}

}
