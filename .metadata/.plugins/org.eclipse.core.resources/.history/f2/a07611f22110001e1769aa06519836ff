package com.training.ue;

import java.util.Random;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.yantra.yfs.japi.YFSEnvironment;
import com.yantra.yfs.japi.YFSUserExitException;
import com.yantra.yfs.japi.ue.YFSBeforeCreateOrderUE;

public class CheckItemNumberUE implements YFSBeforeCreateOrderUE {

	@Override
	public String beforeCreateOrder(YFSEnvironment arg0, String arg1) throws YFSUserExitException {
		return null;
	}
	@Override
	public Document beforeCreateOrder(YFSEnvironment env, Document inputDoc) throws YFSUserExitException {
		Element rootElement = inputDoc.getDocumentElement();
		NodeList items = inputDoc.getElementsByTagName("Item");
		NodeList orderLines = inputDoc.getElementsByTagName("OrderLine");
		Element extn;

		for(int i=0;i<items.getLength();i++) {
			extn = (Element) items.item(0);
			String itemid = "V-"+extn.getAttribute("ItemID");

			if (itemid.isEmpty()) {
				throw new YFSUserExitException("ItemID is empty");
			}
			
			extn = (Element) orderLines.item(i);
		    Element extn1 = inputDoc.createElement("Extn");
		    extn1.setAttribute("SubItemId", itemid);
		    extn.appendChild(extn1);
			
		}

		Random random = new Random();
		String randomNum = ""+random.nextInt(10000);

		Element extn2 = inputDoc.createElement("Extn");
		
		extn2.setAttribute("CustomerNo",randomNum);
		rootElement.appendChild(extn2);
		return inputDoc;
	}

}
